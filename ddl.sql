CREATE OR REPLACE TABLE DEMO.DEMO.NYCTRAFFICEVENTS (
ID STRING,                    
UUID STRING NOT NULL,                     
EVENTTYPE STRING,                     
EVENTSUBTYPE STRING,                   
DESCRIPTION TEXT,                              
SEVERITY STRING,                          

-- Location Information
LATITUDE FLOAT,                        
LONGITUDE FLOAT,                       
REGIONNAME STRING,                      
COUNTYNAME STRING,                       
ROADWAYNAME STRING,                     
DIRECTIONOFTRAVEL STRING,              
PRIMARYLOCATION STRING,
SECONDARYLOCATION STRING,
FIRSTARTICLECITY STRING,
SECONDCITY STRING,
NAVTEQLINKID STRING,                   
MAPENCODEDPOLYLINE STRING,  
                  
-- Status Information
LANESAFFECTED STRING,                   
LANESSTATUS STRING,

-- Temporal Information
LASTUPDATED STRING,                       
REPORTED STRING,                           
STARTDATE STRING,                         
PLANNEDENDDATE STRING,   
                
-- System Information
 TS STRING                                
);


create or replace TABLE DEMO.DEMO.NYCTRAFFIC (
	ID VARCHAR(16777216),
	SPEED VARCHAR(16777216),
	TRAVEL_TIME VARCHAR(16777216),
	STATUS VARCHAR(16777216),
	DATA_AS_OF VARCHAR(16777216),
	LINK_ID VARCHAR(16777216),
	LINK_POINTS VARCHAR(16777216),
	ENCODED_POLY_LINE VARCHAR(16777216),
	ENCODED_POLY_LINE_LVLS VARCHAR(16777216),
	OWNER VARCHAR(16777216),
	TRANSCOM_ID VARCHAR(16777216),
	BOROUGH VARCHAR(16777216),
	LINK_NAME VARCHAR(16777216),
	TS VARCHAR(16777216),
	UUID VARCHAR(16777216)
);


create or replace TABLE DEMO.DEMO.NYCTRAFFICIMAGES (
	VIDEOID VARCHAR(16777216),
	VIDEONAME VARCHAR(16777216),
	VIDEOURL VARCHAR(16777216),
	FILENAME VARCHAR(16777216),
	DIRECTIONOFTRAVEL VARCHAR(16777216),
	LATITUDE VARCHAR(16777216),
	LONGITUDE VARCHAR(16777216),
	ROADWAYNAME VARCHAR(16777216),
	URL2 VARCHAR(16777216),
	ENDING VARCHAR(16777216),
	STAGEMESSAGE VARCHAR(16777216),
	STAGESTATUS VARCHAR(16777216),
	TARGETSIZE VARCHAR(16777216),
	UUID VARCHAR(16777216)
);




CREATE OR REPLACE PROCEDURE DEMO.DEMO.ANALYZETRAFFICIMAGE("IMAGE_NAME" VARCHAR)
RETURNS OBJECT
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  result VARIANT;
BEGIN
   ALTER STAGE TRAFFIC REFRESH; 
  
   SELECT SNOWFLAKE.CORTEX.COMPLETE(''claude-3-5-sonnet'', 
    ''Analyze this traffic image and describe what you see. Respond in compact JSON format.'',
    TO_FILE(''@TRAFFIC'', :IMAGE_NAME)) INTO :result;

   INSERT INTO DEMO.DEMO.RAWNYCTRAFFICIMAGES 
   (json_data)
   SELECT PARSE_JSON(:result ) as json_data;
    
   RETURN result;
EXCEPTION
    WHEN OTHER THEN
        RETURN ''Error: '' || SQLSTATE || '' - ''|| SQLERRM;   
END;
';


CREATE OR REPLACE PROCEDURE DEMO.DEMO.ANALYZETRAFFICIMAGE("IMAGE_NAME" VARCHAR, "FILENAME" VARCHAR, "UUID" VARCHAR)
RETURNS OBJECT
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  result VARIANT;
BEGIN
   ALTER STAGE TRAFFIC REFRESH; 
  
   SELECT SNOWFLAKE.CORTEX.COMPLETE(''claude-3-5-sonnet'', 
    ''Analyze this traffic image and describe what you see. Respond in compact JSON format.'',
    TO_FILE(''@TRAFFIC'', :IMAGE_NAME)) INTO :result;

   INSERT INTO DEMO.DEMO.RAWNYCTRAFFICIMAGES 
   (json_data, filename, uuid)
   SELECT PARSE_JSON(:result ) as json_data, :filename, :uuid;
    
   RETURN result;
EXCEPTION
    WHEN OTHER THEN
        RETURN ''Error: '' || SQLSTATE || '' - ''|| SQLERRM;   
END;
';

CREATE OR REPLACE PROCEDURE DEMO.DEMO.ANALYZETRAFFICIMAGE("IMAGE_NAME" VARCHAR, "UUID" VARCHAR)
RETURNS OBJECT
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  result VARIANT;
BEGIN
   ALTER STAGE TRAFFIC REFRESH; 
  
   SELECT SNOWFLAKE.CORTEX.COMPLETE(''claude-3-5-sonnet'', 
    ''Analyze this traffic image and describe what you see. Respond in compact JSON format.'',
    TO_FILE(''@TRAFFIC'', :IMAGE_NAME)) INTO :result;

   INSERT INTO DEMO.DEMO.RAWNYCTRAFFICIMAGES 
   (json_data, filename, uuid)
   SELECT PARSE_JSON(:result ) as json_data, :IMAGE_NAME, :UUID;
    
   RETURN result;
EXCEPTION
    WHEN OTHER THEN
        RETURN ''Error: '' || SQLSTATE || '' - ''|| SQLERRM;   
END;
';

CREATE OR REPLACE PROCEDURE DEMO.DEMO.COUNT_VEHICLES_IN_IMAGE("IMAGE_NAME" VARCHAR)
RETURNS OBJECT
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    result VARIANT;
BEGIN
-- Use claude-3-5-sonnet model for image analysis with structured output
ALTER STAGE TRAFFIC REFRESH; 

SELECT SNOWFLAKE.CORTEX.COMPLETE(''claude-3-5-sonnet'',''Analyze this traffic image and count the number of vehicles. Return the result in JSON format with these fields: total_count (number), vehicle_types (array of strings with vehicle categories), confidence_level (string: high, medium, or low). Only include clearly visible vehicles.'',TO_FILE(''@Traffic'', :IMAGE_NAME)) INTO :result;

RETURN result;

END;
';


